#!/usr/bin/env python3

import os
import sys
import antlr4
import argparse

import shutil 
import pkg_resources

from reelay.formal.regexp import RegExpBuilder as Builder
from reelay.target.cpp import StructGenerator

# comment

def main(argv):

    parser = argparse.ArgumentParser(description='reelay generates some C++ code that matches the regular expression given', formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument(
        'pattern', 
        help='''Regular expression pattern''')

    parser.add_argument(
        '--with-headers', 
        action="store_true",
        help='Generate required header files as well',
        default=False
        )

    parser.add_argument(
        '-o',
        '--outdir',
        help='Specify the output directory',
        default=''
        )

    # Args processing

    args = parser.parse_args()
    expr = args.pattern
    outdir = args.output

    # Code Generation

    builder = Builder()
    states, meta = builder.build(expr)
    
    coder = StructGenerator()
    code = coder.generate(states, meta)

    # Code Write

    filename = os.path.join(outdir, 'Monitor{}.hpp'.format(meta['name']))
    with open(filename, 'w') as f:
        f.write(code)

    if args.with_headers:

        resource = pkg_resources.resource_filename('reelay', '../cpp/common.hpp')
        shutil.copyfile(resource, os.path.join(outdir, 'common.hpp'))

        resource = pkg_resources.resource_filename('reelay', '../cpp/discrete_time.hpp')
        shutil.copyfile(resource, os.path.join(outdir, 'discrete_time.hpp'))

if __name__ == '__main__':
    main(sys.argv)
