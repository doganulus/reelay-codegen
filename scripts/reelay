#!/usr/bin/env python3

import os
import sys
import antlr4
import argparse

import shutil 
import pkg_resources

import yaml

from reelay.target.cpp import StructGenerator, StructGeneratorDense
from reelay.target.ros import RosNodeGenerator

def main(argv):

    sys.argv = argv

    parser = argparse.ArgumentParser(description='reelay generates a monitor code in C++ from formal specifications', formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument(
        'spec_file', 
        help='''specify the monitor in YAML format''')

    parser.add_argument(
        '--name',
        help='override the name in the spec.',
        )

    parser.add_argument(
        '--lang',
        help='override the pattern language in the spec. (regexp or temporal)',
        )

    parser.add_argument(
        '--pattern',
        help='override the pattern in the spec',
        )

    parser.add_argument(
        '--output-dir',
        help='override the output directory in the spec',
        )

    parser.add_argument(
        '--time-model',
        help='override the time model in the spec',
        )

    parser.add_argument(
        '--include',
        help='override include files in the spec',
        )

    parser.add_argument(
        '--no-ros',
        action="store_true",
        help='disable ROS node generation id defined in the spec',
        default = False
        )

    parser.add_argument(
        '--with-headers',
        action="store_true",
        help='copy necessary C++ header files',
        default = False
        )

    args = parser.parse_args()

    config_file = args.spec_file
    with open(config_file) as f:
        cfg = yaml.load(f)

        try:
            name = cfg['name'] if args.name == None else args.name
        except KeyError:
            print("No NAME is specified.")
            sys.exit()

        try:
            pattern = cfg['pattern'] if args.pattern == None else args.pattern
        except KeyError:
            print("No PATTERN is specified.")
            sys.exit()

        try:
            lang = cfg['lang'] if args.lang == None else args.lang
        except KeyError:
            print("No LANG is specified in the input file.")
            sys.exit()

        try:
            output_dir = cfg['output_dir'] if args.output_dir == None else args.output_dir
        except KeyError:
            output_dir = ''

        try:
            time_model = cfg['time_model'] if args.time_model == None else args.time_model
        except KeyError:
            time_model = 'discrete'

        try:
            include = cfg['include'] if args.include == None else args.include
        except KeyError:
            include = []

        try:
            with_headers = cfg['with_headers']
        except KeyError:
            with_headers = args.with_headers

        ros_enabled = not args.no_ros

        if lang.lower() in ["temporal", "tl", "ltl", "ptl", "pasttl", "pastltl"]:
            from reelay.formal.ptl import PastTLBuilder as Builder
        elif lang.lower() in ["regexp", "re", "reg", "regex"]:
            from reelay.formal.regexp import RegExpBuilder as Builder
        else:
            print("ERROR: LANG should be either regexp or temporal.")


        builder = Builder()
        states, meta = builder.build(pattern)

        # Ugly! To be changed.
        meta['name'] = name
        # meta['vars'] = sorted(list(meta['vars']))
    
        if time_model == "discrete":
            monitor_coder = StructGenerator(include=include)
            monitor_code = monitor_coder.generate(states, meta) 
        elif time_model == "dense":
            monitor_coder = StructGeneratorDense(include=include)
            monitor_code = monitor_coder.generate(states, meta) 
        else:
            print("ERROR: Time model should be either discrete or dense.")

        # print(monitor_code)

        monitor_file = os.path.join(output_dir, 'Monitor{}.hpp'.format(name))
        with open(monitor_file, 'w') as f:
            f.write(monitor_code)

        # if with_headers:

        #     resource = pkg_resources.resource_filename('reelay', '../cpp/discrete_time.hpp')
        #     shutil.copyfile(resource, os.path.join(output_dir, 'discrete_time.hpp'))

        #     resource = pkg_resources.resource_filename('reelay', '../cpp/dense_time.hpp')
        #     shutil.copyfile(resource, os.path.join(output_dir, 'dense_time.hpp'))

        if ros_enabled and 'ros' in cfg:

            ros_node_coder = RosNodeGenerator(states, meta, cfg['ros'])
            ros_node_code = ros_node_coder.generate() 
            # print(ros_node_code)

            rosnode_file = os.path.join(output_dir, 'Node{}.cpp'.format(name))
            with open(rosnode_file, 'w') as f:
                f.write(ros_node_code)

            # print(ros_node_code)


if __name__ == '__main__':
    main(sys.argv)

    # main(["reelay", "../examples/ros_nodes/spec.yaml", "--output-dir", "/mnt/c/Users/Dogan/Dropbox/Research/dev/catkin/src/new_monitor", "--with-headers"])



#     document = """
# --- # Monitor Specification
# name : "Expr"
# lang : "temporal"
# pattern : "always[>=40](lt(yaw:double, 5.5) and lt(roll:double , 5.5) and lt(pitch:double , 5.5))"
# include : ["blabla.h"]
# with_headers : true
# output_dir : "."
# ros:
#   input_topic: "GyroData"
#   output_topic: "ExprHolds"
#   message_type: "geometry_msgs::Twist"
#   include : ["geometry_msgs/Twist.h"]
#   assign: 
#     yaw  : "angular.x"
#     roll : "angular.y" 
#     pitch: "angular.z"
#     """ 
#     cfg = yaml.load(document)

#     print(cfg['ros']['assign'])
